#!/usr/bin/env node
/**
 * Script para aplicar configura√ß√µes otimizadas do PostgreSQL
 */

import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

console.log('üóÑÔ∏è  APLICANDO CONFIGURA√á√ïES OTIMIZADAS DO POSTGRESQL');
console.log('=' .repeat(70));

// Verificar vari√°veis de ambiente
if (!process.env.POSTGRES_HOST || !process.env.POSTGRES_DB || !process.env.POSTGRES_USER) {
  console.error('‚ùå Vari√°veis de ambiente do banco n√£o configuradas!');
  process.exit(1);
}

// Configurar pool de conex√£o com privil√©gios elevados
const pool = new Pool({
  user: process.env.POSTGRES_USER,
  host: process.env.POSTGRES_HOST,
  database: process.env.POSTGRES_DB,
  password: process.env.POSTGRES_PASSWORD,
  port: parseInt(process.env.POSTGRES_PORT || '5432'),
  ssl: { rejectUnauthorized: false }
});

// Configura√ß√µes otimizadas para evitar locks
const OPTIMIZATIONS = [
  // 1. CONFIGURA√á√ïES DE LOCKS E TIMEOUTS
  "ALTER SYSTEM SET lock_timeout = '10s';",
  "ALTER SYSTEM SET deadlock_timeout = '1s';",
  "ALTER SYSTEM SET statement_timeout = '30s';",
  "ALTER SYSTEM SET log_lock_waits = 'on';",
  "ALTER SYSTEM SET log_statement = 'mod';",
  
  // 2. CONFIGURA√á√ïES DE CONEX√ïES
  "ALTER SYSTEM SET max_connections = '200';",
  
  // 3. CONFIGURA√á√ïES DE MEM√ìRIA E PERFORMANCE
  "ALTER SYSTEM SET shared_buffers = '256MB';",
  "ALTER SYSTEM SET effective_cache_size = '1GB';",
  "ALTER SYSTEM SET work_mem = '4MB';",
  "ALTER SYSTEM SET maintenance_work_mem = '64MB';",
  
  // 4. CONFIGURA√á√ïES DE WAL
  "ALTER SYSTEM SET wal_buffers = '16MB';",
  "ALTER SYSTEM SET checkpoint_completion_target = '0.9';",
  "ALTER SYSTEM SET checkpoint_timeout = '5min';",
  
  // 5. CONFIGURA√á√ïES DE AUTOVACUUM
  "ALTER SYSTEM SET autovacuum = 'on';",
  "ALTER SYSTEM SET autovacuum_max_workers = '3';",
  "ALTER SYSTEM SET autovacuum_naptime = '1min';",
  "ALTER SYSTEM SET autovacuum_vacuum_threshold = '50';",
  "ALTER SYSTEM SET autovacuum_analyze_threshold = '50';",
  
  // 6. CONFIGURA√á√ïES DE LOG
  "ALTER SYSTEM SET log_min_duration_statement = '1000';",
  "ALTER SYSTEM SET log_checkpoints = 'on';",
  "ALTER SYSTEM SET log_connections = 'on';",
  "ALTER SYSTEM SET log_disconnections = 'on';",
  
  // 7. CONFIGURA√á√ïES DE QUERY PLANNER
  "ALTER SYSTEM SET random_page_cost = '1.1';",
  "ALTER SYSTEM SET effective_io_concurrency = '200';"
];

// Fun√ß√£o para aplicar configura√ß√µes
async function applyOptimizations() {
  try {
    console.log('üîß Aplicando configura√ß√µes otimizadas...\n');
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const optimization of OPTIMIZATIONS) {
      try {
        console.log(`   Aplicando: ${optimization}`);
        await pool.query(optimization);
        console.log(`   ‚úÖ Sucesso: ${optimization}`);
        successCount++;
      } catch (error) {
        console.log(`   ‚ùå Erro: ${optimization}`);
        console.log(`      Motivo: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log(`\nüìä RESUMO:`);
    console.log(`   ‚úÖ Sucessos: ${successCount}`);
    console.log(`   ‚ùå Erros: ${errorCount}`);
    
    if (successCount > 0) {
      console.log('\nüîÑ Recarregando configura√ß√µes...');
      try {
        await pool.query('SELECT pg_reload_conf();');
        console.log('‚úÖ Configura√ß√µes recarregadas com sucesso');
      } catch (error) {
        console.log('‚ö†Ô∏è  N√£o foi poss√≠vel recarregar configura√ß√µes automaticamente');
        console.log('üí° Execute manualmente: SELECT pg_reload_conf();');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao aplicar otimiza√ß√µes:', error.message);
  }
}

// Fun√ß√£o para verificar configura√ß√µes atuais
async function checkCurrentSettings() {
  try {
    console.log('\nüìã Verificando configura√ß√µes atuais...\n');
    
    const settingsQuery = `
      SELECT name, setting, unit, context, category 
      FROM pg_settings 
      WHERE name IN (
        'lock_timeout', 'deadlock_timeout', 'statement_timeout',
        'max_connections', 'shared_buffers', 'work_mem',
        'autovacuum', 'log_lock_waits'
      )
      ORDER BY category, name;
    `;
    
    const result = await pool.query(settingsQuery);
    
    if (result.rows.length === 0) {
      console.log('‚ö†Ô∏è  Nenhuma configura√ß√£o relevante encontrada');
    } else {
      console.log(`üìä Configura√ß√µes encontradas (${result.rows.length}):`);
      result.rows.forEach(setting => {
        console.log(`   ${setting.name}: ${setting.setting}${setting.unit ? ' ' + setting.unit : ''} (${setting.context})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar configura√ß√µes:', error.message);
  }
}

// Fun√ß√£o para criar √≠ndices otimizados
async function createOptimizedIndexes() {
  try {
    console.log('\nüîç Criando √≠ndices otimizados...\n');
    
    const indexes = [
      // √çndices para tabela streams
      "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_streams_name ON streams(name);",
      "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_streams_segmento ON streams(segmento);",
      "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_streams_cidade ON streams(cidade);",
      "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_streams_estado ON streams(estado);"
    ];
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const index of indexes) {
      try {
        console.log(`   Criando: ${index}`);
        await pool.query(index);
        console.log(`   ‚úÖ Sucesso: ${index}`);
        successCount++;
      } catch (error) {
        console.log(`   ‚ùå Erro: ${index}`);
        console.log(`      Motivo: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log(`\nüìä RESUMO DOS √çNDICES:`);
    console.log(`   ‚úÖ Sucessos: ${successCount}`);
    console.log(`   ‚ùå Erros: ${errorCount}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao criar √≠ndices:', error.message);
  }
}

// Fun√ß√£o para analisar tabelas
async function analyzeTables() {
  try {
    console.log('\nüìä Analisando tabelas para otimizar estat√≠sticas...\n');
    
    const tables = ['streams']; // Adicione outras tabelas conforme necess√°rio
    
    for (const table of tables) {
      try {
        console.log(`   Analisando tabela: ${table}`);
        await pool.query(`ANALYZE ${table};`);
        console.log(`   ‚úÖ An√°lise conclu√≠da: ${table}`);
      } catch (error) {
        console.log(`   ‚ùå Erro ao analisar ${table}: ${error.message}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao analisar tabelas:', error.message);
  }
}

// Fun√ß√£o principal
async function main() {
  try {
    console.log('üöÄ Iniciando otimiza√ß√£o do PostgreSQL...\n');
    
    // Verificar configura√ß√µes atuais
    await checkCurrentSettings();
    
    // Aplicar otimiza√ß√µes
    await applyOptimizations();
    
    // Criar √≠ndices otimizados
    await createOptimizedIndexes();
    
    // Analisar tabelas
    await analyzeTables();
    
    // Verificar configura√ß√µes finais
    await checkCurrentSettings();
    
    console.log('\nüéâ OTIMIZA√á√ÉO DO POSTGRESQL CONCLU√çDA!');
    console.log('üí° Reinicie o servidor PostgreSQL para aplicar todas as mudan√ßas');
    
  } catch (error) {
    console.error('‚ùå Erro na otimiza√ß√£o:', error);
  } finally {
    await pool.end();
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
