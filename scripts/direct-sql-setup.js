/**
 * Script para aplicar SQL diretamente sem depender da fun√ß√£o exec_sql
 * Esta √© uma abordagem alternativa para criar o trigger de sincroniza√ß√£o com o Brevo
 */
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import pg from 'pg';
const { Pool } = pg;

// Carregar vari√°veis de ambiente
dotenv.config();

// Configurar cliente Supabase para opera√ß√µes de autentica√ß√£o
const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;

// Validar configura√ß√µes
if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

// Criar cliente Supabase com chave de servi√ßo
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Caminho para o arquivo SQL
const sqlFilePath = path.join(process.cwd(), 'supabase', 'migrations', 'auto_sync_trial_users.sql');

// Dividir o SQL em blocos execut√°veis
function splitSqlIntoBlocks(sqlContent) {
  // Identificamos os blocos DO $$ ... $$ e os tratamos como unidades at√¥micas
  const blocks = [];
  let currentBlock = '';
  let insideDoBlock = false;
  let blockStartCount = 0;
  
  // Dividir o SQL em linhas
  const lines = sqlContent.split('\n');
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    
    // Verificar se estamos entrando em um bloco DO
    if (trimmedLine.startsWith('DO $$')) {
      insideDoBlock = true;
      blockStartCount = 1; // Contamos o n√∫mero de $$ para lidar com $$ aninhados
      currentBlock = line + '\n';
    } 
    // Se estamos dentro de um bloco DO
    else if (insideDoBlock) {
      currentBlock += line + '\n';
      
      // Contar $$ para garantir que s√≥ sairemos quando todos forem fechados
      if (trimmedLine.includes('$$')) {
        const matches = trimmedLine.match(/\$\$/g) || [];
        blockStartCount += matches.length;
        
        // Se o n√∫mero de $$ for par, podemos ter sa√≠do do bloco
        if (blockStartCount % 2 === 0) {
          // Verificar se este √© o fim do bloco DO
          if (blockStartCount === 2 || trimmedLine === '$$;') {
            insideDoBlock = false;
            blocks.push(currentBlock.trim());
            currentBlock = '';
          }
        }
      }
    } 
    // Se n√£o estamos em um bloco DO e temos conte√∫do significativo
    else if (trimmedLine && !trimmedLine.startsWith('--')) {
      // Verificar se √© uma instru√ß√£o completa
      if (trimmedLine.endsWith(';')) {
        // Se j√° temos algo no bloco atual, adicione a linha e salve o bloco
        if (currentBlock) {
          currentBlock += line;
          blocks.push(currentBlock.trim());
          currentBlock = '';
        } 
        // Caso contr√°rio, a linha √© uma instru√ß√£o completa por si s√≥
        else {
          blocks.push(line.trim());
        }
      } 
      // Se n√£o termina com ponto e v√≠rgula, faz parte de uma instru√ß√£o mais longa
      else {
        currentBlock += line + '\n';
      }
    } 
    // Preservar coment√°rios e linhas vazias dentro de blocos
    else if (insideDoBlock) {
      currentBlock += line + '\n';
    }
  }
  
  // Se ainda tivermos conte√∫do no bloco atual, adicion√°-lo tamb√©m
  if (currentBlock.trim()) {
    blocks.push(currentBlock.trim());
  }
  
  return blocks.filter(block => block.trim() !== '');
}

// Fun√ß√£o para executar os comandos SQL no Supabase diretamente
async function executeSupabaseSQL(sql) {
  try {
    // Configurar conex√£o PostgreSQL direta
    const pool = new Pool({
      host: process.env.POSTGRES_HOST || 'localhost',
      port: process.env.POSTGRES_PORT || 5432,
      database: process.env.POSTGRES_DB || 'postgres',
      user: process.env.POSTGRES_USER || 'postgres',
      password: process.env.POSTGRES_PASSWORD,
      ssl: process.env.NODE_ENV === 'production'
    });
    
    // Executar a consulta e retornar resultados
    const result = await pool.query(sql);
    
    // Fechar pool ap√≥s uso
    await pool.end();
    
    return { data: result.rows, success: true };
  } catch (error) {
    console.error('Erro ao executar SQL:', error);
    throw error;
  }
}

// Fun√ß√£o principal
async function applyDirectSQL() {
  try {
    console.log('üîë Conectando ao Supabase:', supabaseUrl);
    
    console.log('üìÑ Lendo arquivo SQL:', sqlFilePath);
    
    if (!fs.existsSync(sqlFilePath)) {
      throw new Error(`Arquivo SQL n√£o encontrado: ${sqlFilePath}`);
    }
    
    const sqlContent = fs.readFileSync(sqlFilePath, 'utf8');
    console.log('üìù Conte√∫do SQL lido, dividindo em blocos execut√°veis...');
    
    // Dividir o SQL em blocos execut√°veis
    const sqlBlocks = splitSqlIntoBlocks(sqlContent);
    console.log(`üß© SQL dividido em ${sqlBlocks.length} blocos`);
    
    // Executar cada bloco separadamente
    for (let i = 0; i < sqlBlocks.length; i++) {
      const block = sqlBlocks[i];
      console.log(`\nüì¶ Executando bloco SQL ${i + 1}/${sqlBlocks.length}...`);
      
      try {
        const result = await executeSupabaseSQL(block);
        console.log(`‚úÖ Bloco ${i + 1} executado com sucesso`);
      } catch (blockError) {
        console.error(`‚ùå Erro no bloco ${i + 1}:`, blockError.message);
        console.log('‚ö†Ô∏è Conte√∫do do bloco com erro:');
        console.log(block);
        console.log('\n‚ö†Ô∏è Continuando com o pr√≥ximo bloco...');
      }
    }
    
    console.log('\nüîç Verificando se o trigger foi criado...');
    
    // Verificar se o trigger foi criado
    try {
      const { data, error } = await executeSupabaseSQL(
        "SELECT tgname, pg_get_triggerdef(t.oid) FROM pg_trigger t WHERE tgname = 'trigger_sync_new_trial_user_to_brevo';"
      );
      
      if (error) {
        console.warn('‚ö†Ô∏è Erro ao verificar trigger:', error.message);
      } else if (data && data.length > 0) {
        console.log('üìã Verifica√ß√£o do trigger:');
        console.log(data);
        console.log('‚úÖ Trigger instalado e funcionando corretamente!');
      } else {
        console.warn('‚ö†Ô∏è Trigger n√£o encontrado na verifica√ß√£o');
      }
    } catch (verifyError) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel verificar o trigger:', verifyError.message);
    }
    
    console.log('\n‚úÖ Processo de aplica√ß√£o SQL conclu√≠do!');
    
  } catch (error) {
    console.error('‚ùå Erro ao aplicar SQL diretamente:', error.message);
    
    // Fornecer instru√ß√µes para execu√ß√£o manual se necess√°rio
    console.log('\n‚ö†Ô∏è Voc√™ pode precisar executar o SQL manualmente no console do Supabase:');
    console.log('1. Acesse https://supabase.com/dashboard');
    console.log('2. Selecione seu projeto');
    console.log('3. Acesse "SQL Editor"');
    console.log('4. Cole o conte√∫do do arquivo auto_sync_trial_users.sql');
    console.log('5. Execute-o\n');
    
    throw error;
  }
}

// Executar o script
applyDirectSQL()
  .then(() => {
    console.log('‚ö° Script finalizado com sucesso.');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erro fatal durante a execu√ß√£o do script:', error);
    process.exit(1);
  }); 