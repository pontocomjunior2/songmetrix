/**
 * Script para for√ßar a sincroniza√ß√£o de um usu√°rio espec√≠fico com o Brevo
 * √ötil para testes ou quando for necess√°rio mover manualmente um usu√°rio entre listas
 * 
 * Uso: node scripts/force-sync-brevo.js <email> [status]
 * Exemplo: node scripts/force-sync-brevo.js usuario@exemplo.com ATIVO
 */
import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';
import SibApiV3Sdk from 'sib-api-v3-sdk';

// Carregar vari√°veis de ambiente
dotenv.config();

// Obter argumentos da linha de comando
const userEmail = process.argv[2];
const forceStatus = process.argv[3];

if (!userEmail) {
  console.error('‚ùå Email do usu√°rio n√£o fornecido');
  console.log('Uso: node scripts/force-sync-brevo.js <email> [status]');
  console.log('Exemplo: node scripts/force-sync-brevo.js usuario@exemplo.com ATIVO');
  process.exit(1);
}

// Configurar cliente Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o configuradas');
  process.exit(1);
}

console.log('üîë Conectando ao Supabase:', supabaseUrl);

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Configurar cliente Brevo
const defaultClient = SibApiV3Sdk.ApiClient.instance;
const apiKey = defaultClient.authentications['api-key'];
const brevoApiKey = process.env.BREVO_API_KEY;

if (!brevoApiKey) {
  console.error('‚ùå BREVO_API_KEY n√£o configurada no .env');
  process.exit(1);
}

apiKey.apiKey = brevoApiKey;
console.log('üîë API Key do Brevo configurada');

// IDs das listas do Brevo conforme status
const statusListIds = {
  TRIAL: 7,   // Lista para usu√°rios Trial
  ATIVO: 8,   // Lista para usu√°rios Ativos
  INATIVO: 9, // Lista para usu√°rios Inativos
};

// Fun√ß√£o para sincronizar diretamente via API REST em vez do SDK
async function syncUserToBrevoREST(email, status, attributes) {
  try {
    console.log('üîÑ Usando API REST direta para sincroniza√ß√£o...');
    
    // Determinar a lista alvo para o status
    const targetListId = statusListIds[status];
    
    // Verificar se o contato j√° existe
    console.log(`üîç Verificando se o contato j√° existe: ${email}`);
    try {
      const existingContactResponse = await fetch(`https://api.brevo.com/v3/contacts/${encodeURIComponent(email)}`, {
        method: 'GET',
        headers: {
          'api-key': brevoApiKey,
          'Content-Type': 'application/json'
        }
      });
      
      if (existingContactResponse.ok) {
        const contactData = await existingContactResponse.json();
        console.log(`‚úÖ Contato encontrado (ID: ${contactData.id})`);
        
        // Atualizar atributos
        console.log('üìù Atualizando atributos do contato...');
        const updateResponse = await fetch(`https://api.brevo.com/v3/contacts/${encodeURIComponent(email)}`, {
          method: 'PUT',
          headers: {
            'api-key': brevoApiKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            attributes: attributes
          })
        });
        
        if (!updateResponse.ok) {
          console.warn(`‚ö†Ô∏è Falha ao atualizar atributos: ${updateResponse.status}`);
          console.warn(await updateResponse.text());
        } else {
          console.log('‚úÖ Atributos atualizados com sucesso');
        }
        
        // Remover de todas as listas
        console.log('üóëÔ∏è Removendo contato de todas as listas...');
        for (const listId of Object.values(statusListIds)) {
          try {
            const removeResponse = await fetch(`https://api.brevo.com/v3/contacts/lists/${listId}/contacts/remove`, {
              method: 'POST',
              headers: {
                'api-key': brevoApiKey,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                emails: [email]
              })
            });
            
            if (removeResponse.ok) {
              console.log(`‚úÖ Contato removido da lista ${listId}`);
            } else {
              console.log(`‚ö†Ô∏è Nota: falha ao remover da lista ${listId} (provavelmente n√£o estava nela)`);
            }
          } catch (err) {
            console.warn(`‚ö†Ô∏è Erro ao remover da lista ${listId}: ${err.message}`);
          }
          
          // Pequena pausa para evitar rate limits
          await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        // Adicionar √† lista correta
        console.log(`üìã Adicionando contato √† lista ${targetListId} para status ${status}...`);
        const addResponse = await fetch(`https://api.brevo.com/v3/contacts/lists/${targetListId}/contacts/add`, {
          method: 'POST',
          headers: {
            'api-key': brevoApiKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            emails: [email]
          })
        });
        
        if (addResponse.ok) {
          console.log(`‚úÖ Contato adicionado √† lista ${targetListId} com sucesso`);
          return {
            success: true,
            message: `Usu√°rio sincronizado com sucesso e adicionado √† lista para status ${status}`,
            email: email,
            status: status,
            listId: targetListId
          };
        } else {
          const addError = await addResponse.text();
          throw new Error(`Falha ao adicionar √† lista ${targetListId}: ${addResponse.status} - ${addError}`);
        }
      } else {
        // Contato n√£o existe, vamos criar
        console.log(`‚ö†Ô∏è Contato n√£o encontrado. Criando novo contato...`);
        
        const createResponse = await fetch('https://api.brevo.com/v3/contacts', {
          method: 'POST',
          headers: {
            'api-key': brevoApiKey,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            email: email,
            attributes: attributes,
            listIds: [targetListId],
            updateEnabled: true
          })
        });
        
        if (createResponse.ok) {
          const createResult = await createResponse.json();
          console.log(`‚úÖ Novo contato criado com sucesso (ID: ${createResult.id})`);
          return {
            success: true,
            message: `Novo contato criado e adicionado √† lista para status ${status}`,
            email: email,
            status: status,
            listId: targetListId
          };
        } else {
          const createError = await createResponse.text();
          throw new Error(`Falha ao criar contato: ${createResponse.status} - ${createError}`);
        }
      }
    } catch (error) {
      throw error;
    }
  } catch (error) {
    console.error(`‚ùå Erro na API REST do Brevo: ${error.message}`);
    return {
      success: false,
      error: error.message,
      email: email
    };
  }
}

// Fun√ß√£o para sincronizar um usu√°rio espec√≠fico com o Brevo
async function syncUserToBrevo(email, forceStatus = null) {
  try {
    console.log(`üîç Buscando dados do usu√°rio: ${email}`);
    
    // Buscar dados do usu√°rio no Supabase
    const { data: userData, error } = await supabase
      .from('users')
      .select('id, email, full_name, status, created_at, whatsapp')
      .eq('email', email)
      .single();
    
    if (error) {
      throw new Error(`Erro ao buscar usu√°rio: ${error.message}`);
    }
    
    if (!userData) {
      throw new Error(`Usu√°rio n√£o encontrado: ${email}`);
    }
    
    console.log(`‚úÖ Usu√°rio encontrado: ${userData.full_name || userData.email}`);
    console.log(`üìä Status atual: ${userData.status}`);
    
    // Usar o status for√ßado se fornecido
    const userStatus = forceStatus || userData.status;
    
    if (forceStatus && forceStatus !== userData.status) {
      console.log(`‚ö†Ô∏è Usando status for√ßado: ${forceStatus} (diferente do status atual: ${userData.status})`);
    }
    
    // Determinar a lista alvo com base no status
    const targetListId = statusListIds[userStatus];
    
    if (!targetListId) {
      throw new Error(`Status inv√°lido para gerenciamento de listas: ${userStatus}`);
    }
    
    console.log(`üìã Lista alvo para status ${userStatus}: ${targetListId}`);
    
    // Preparar atributos do contato
    const attributes = {};
    
    if (userData.full_name) {
      // Dividir nome completo em primeiro nome e sobrenome
      const nameParts = userData.full_name.split(' ');
      attributes.FNAME = nameParts[0] || '';
      attributes.LNAME = nameParts.slice(1).join(' ') || '';
      attributes.NOME = userData.full_name;
    }
    
    if (userData.whatsapp) {
      // Remover caracteres n√£o num√©ricos e adicionar prefixo se necess√°rio
      let whatsapp = userData.whatsapp.replace(/\D/g, '');
      if (!whatsapp.startsWith('+')) {
        // Se n√£o come√ßar com +, adicionar c√≥digo do Brasil
        if (!whatsapp.startsWith('55')) {
          whatsapp = '55' + whatsapp;
        }
      }
      attributes.SMS = whatsapp;
      attributes.WHATSAPP = whatsapp;
    }
    
    // Adicionar o status atual aos atributos
    attributes.STATUS = userStatus;
    
    if (userData.created_at) {
      attributes.DATA_CADASTRO = new Date(userData.created_at).toISOString().split('T')[0];
    }
    
    // Sincronizar usando a API REST direta, que √© mais confi√°vel
    return await syncUserToBrevoREST(email, userStatus, attributes);
  } catch (error) {
    console.error(`‚ùå Erro ao sincronizar usu√°rio com o Brevo: ${error.message}`);
    return {
      success: false,
      error: error.message,
      email
    };
  }
}

// Executar a fun√ß√£o principal
syncUserToBrevo(userEmail, forceStatus)
  .then(result => {
    if (result.success) {
      console.log('\n‚úÖ Opera√ß√£o conclu√≠da com sucesso:');
      console.log(`üìß Email: ${result.email}`);
      console.log(`üìä Status: ${result.status}`);
      console.log(`üìã Lista: ${result.listId}`);
    } else {
      console.error('\n‚ùå Falha na opera√ß√£o:');
      console.error(`üìß Email: ${result.email}`);
      console.error(`‚ùå Erro: ${result.error}`);
    }
    process.exit(result.success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå Erro fatal:', error);
    process.exit(1);
  }); 