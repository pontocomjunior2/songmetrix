import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

// Configurar vari√°veis de ambiente
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Carregar .env do diret√≥rio raiz
dotenv.config({ path: join(__dirname, '..', '.env') });

// Importar o servi√ßo ap√≥s carregar as vari√°veis de ambiente
const { InsightGeneratorService } = await import('../src/services/insightGeneratorService.js');

/**
 * Script para gerar insights musicais para usu√°rios
 * 
 * Uso:
 * - Todos os usu√°rios: node scripts/generate-insights.js
 * - Usu√°rio espec√≠fico: node scripts/generate-insights.js --user-id=uuid-here
 */
async function main() {
  const args = process.argv.slice(2);
  const userIdArg = args.find(arg => arg.startsWith('--user-id='));
  const specificUserId = userIdArg ? userIdArg.split('=')[1] : null;

  console.log('üöÄ Iniciando gera√ß√£o de insights musicais...');
  console.log('üìÖ Data/Hora:', new Date().toISOString());
  
  if (specificUserId) {
    console.log('üë§ Usu√°rio espec√≠fico:', specificUserId);
  } else {
    console.log('üë• Processando todos os usu√°rios ativos');
  }

  const service = new InsightGeneratorService();
  
  try {
    const startTime = Date.now();
    
    if (specificUserId) {
      await service.generateInsightsForUser(specificUserId);
      console.log(`‚úÖ Insight gerado para usu√°rio ${specificUserId}`);
    } else {
      await service.generateInsightsForAllUsers();
      console.log('‚úÖ Insights gerados para todos os usu√°rios');
    }
    
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    console.log(`‚è±Ô∏è  Tempo total de execu√ß√£o: ${duration}s`);
    console.log('üéâ Gera√ß√£o de insights conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro na gera√ß√£o de insights:', error);
    console.error('Stack trace:', error.stack);
    process.exit(1);
  } finally {
    try {
      await service.close();
      console.log('üîå Conex√µes fechadas');
    } catch (closeError) {
      console.error('‚ö†Ô∏è  Erro ao fechar conex√µes:', closeError);
    }
  }
}

// Tratamento de erros n√£o capturados
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

// Executar o script
main();