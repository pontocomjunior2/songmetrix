#!/usr/bin/env node
/**
 * Script de monitoramento simplificado para testar conex√£o
 */

import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

console.log('üîç MONITORAMENTO SIMPLIFICADO DE LOCKS');
console.log('=' .repeat(60));

// Verificar vari√°veis de ambiente
console.log('üìã Vari√°veis de ambiente:');
console.log(`   POSTGRES_HOST: ${process.env.POSTGRES_HOST || 'N√ÉO DEFINIDO'}`);
console.log(`   POSTGRES_DB: ${process.env.POSTGRES_DB || 'N√ÉO DEFINIDO'}`);
console.log(`   POSTGRES_USER: ${process.env.POSTGRES_USER || 'N√ÉO DEFINIDO'}`);
console.log(`   POSTGRES_PORT: ${process.env.POSTGRES_PORT || '5432'}`);

if (!process.env.POSTGRES_HOST || !process.env.POSTGRES_DB || !process.env.POSTGRES_USER) {
  console.error('‚ùå Vari√°veis de ambiente do banco n√£o configuradas!');
  console.log('üí° Configure o arquivo .env com as credenciais do banco');
  process.exit(1);
}

// Configurar pool de conex√£o
const pool = new Pool({
  user: process.env.POSTGRES_USER,
  host: process.env.POSTGRES_HOST,
  database: process.env.POSTGRES_DB,
  password: process.env.POSTGRES_PASSWORD,
  port: parseInt(process.env.POSTGRES_PORT || '5432'),
  ssl: { rejectUnauthorized: false }
});

// Fun√ß√£o para verificar locks ativos
async function checkLocks() {
  try {
    console.log('\nüîí Verificando locks ativos...');
    
    const locksQuery = `
      SELECT 
        l.pid,
        l.mode,
        l.granted,
        t.schemaname,
        t.tablename,
        p.usename,
        p.application_name,
        p.state,
        EXTRACT(EPOCH FROM (NOW() - p.query_start)) as query_duration_seconds
      FROM pg_locks l
      JOIN pg_stat_all_tables t ON l.relation = t.relid
      JOIN pg_stat_activity p ON l.pid = p.pid
      WHERE l.relation IS NOT NULL 
        AND t.schemaname = 'public'
      ORDER BY l.granted, l.mode, query_duration_seconds DESC
      LIMIT 10;
    `;
    
    const result = await pool.query(locksQuery);
    
    if (result.rows.length === 0) {
      console.log('‚úÖ Nenhum lock ativo encontrado');
    } else {
      console.log(`üìä Encontrados ${result.rows.length} locks ativos:`);
      result.rows.forEach((lock, index) => {
        console.log(`\n   Lock ${index + 1}:`);
        console.log(`     PID: ${lock.pid}`);
        console.log(`     Tabela: ${lock.schemaname}.${lock.tablename}`);
        console.log(`     Modo: ${lock.mode}`);
        console.log(`     Concedido: ${lock.granted ? '‚úÖ Sim' : '‚ùå N√£o'}`);
        console.log(`     Usu√°rio: ${lock.usename}`);
        console.log(`     Aplica√ß√£o: ${lock.application_name || 'N/A'}`);
        console.log(`     Estado: ${lock.state}`);
        console.log(`     Dura√ß√£o: ${Math.round(lock.query_duration_seconds || 0)}s`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar locks:', error.message);
  }
}

// Fun√ß√£o para verificar transa√ß√µes longas
async function checkLongTransactions() {
  try {
    console.log('\n‚è±Ô∏è  Verificando transa√ß√µes longas...');
    
    const longTxQuery = `
      SELECT 
        pid,
        usename,
        application_name,
        state,
        EXTRACT(EPOCH FROM (NOW() - xact_start)) as transaction_duration_seconds,
        EXTRACT(EPOCH FROM (NOW() - query_start)) as query_duration_seconds,
        query
      FROM pg_stat_activity 
      WHERE state != 'idle' 
        AND xact_start IS NOT NULL
        AND xact_start < NOW() - INTERVAL '5 seconds'
      ORDER BY transaction_duration_seconds DESC
      LIMIT 5;
    `;
    
    const result = await pool.query(longTxQuery);
    
    if (result.rows.length === 0) {
      console.log('‚úÖ Nenhuma transa√ß√£o longa encontrada');
    } else {
      console.log(`üìä Encontradas ${result.rows.length} transa√ß√µes longas:`);
      result.rows.forEach((tx, index) => {
        console.log(`\n   Transa√ß√£o ${index + 1}:`);
        console.log(`     PID: ${tx.pid}`);
        console.log(`     Usu√°rio: ${tx.usename}`);
        console.log(`     Aplica√ß√£o: ${tx.application_name || 'N/A'}`);
        console.log(`     Estado: ${tx.state}`);
        console.log(`     Dura√ß√£o da Transa√ß√£o: ${Math.round(tx.transaction_duration_seconds)}s`);
        console.log(`     Dura√ß√£o da Query: ${Math.round(tx.query_duration_seconds)}s`);
        if (tx.query) {
          console.log(`     Query: ${tx.query.substring(0, 100)}...`);
        }
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar transa√ß√µes longas:', error.message);
  }
}

// Fun√ß√£o para verificar estat√≠sticas das tabelas
async function checkTableStats() {
  try {
    console.log('\nüìà Verificando estat√≠sticas das tabelas...');
    
    const statsQuery = `
      SELECT 
        schemaname,
        tablename,
        n_tup_ins as inserts,
        n_tup_upd as updates,
        n_tup_del as deletes,
        n_live_tup as live_rows,
        n_dead_tup as dead_rows,
        last_vacuum,
        last_autovacuum,
        last_analyze,
        last_autoanalyze
      FROM pg_stat_user_tables 
      WHERE tablename IN ('streams', 'executions', 'radio_suggestions')
      ORDER BY tablename;
    `;
    
    const result = await pool.query(statsQuery);
    
    if (result.rows.length === 0) {
      console.log('‚ö†Ô∏è  Nenhuma tabela relevante encontrada');
    } else {
      console.log(`üìä Estat√≠sticas de ${result.rows.length} tabelas:`);
      result.rows.forEach(table => {
        console.log(`\n   üìã ${table.schemaname}.${table.tablename}:`);
        console.log(`     Inserts: ${table.inserts || 0}`);
        console.log(`     Updates: ${table.updates || 0}`);
        console.log(`     Deletes: ${table.deletes || 0}`);
        console.log(`     Linhas ativas: ${table.live_rows || 0}`);
        console.log(`     Linhas mortas: ${table.dead_rows || 0}`);
        console.log(`     √öltimo vacuum: ${table.last_vacuum || 'Nunca'}`);
        console.log(`     √öltimo autovacuum: ${table.last_autovacuum || 'Nunca'}`);
        console.log(`     √öltimo analyze: ${table.last_analyze || 'Nunca'}`);
        console.log(`     √öltimo autoanalyze: ${table.last_autoanalyze || 'Nunca'}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar estat√≠sticas:', error.message);
  }
}

// Fun√ß√£o principal
async function main() {
  try {
    console.log('üöÄ Iniciando verifica√ß√£o...\n');
    
    // Verificar locks
    await checkLocks();
    
    // Verificar transa√ß√µes longas
    await checkLongTransactions();
    
    // Verificar estat√≠sticas das tabelas
    await checkTableStats();
    
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o:', error);
  } finally {
    await pool.end();
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}
