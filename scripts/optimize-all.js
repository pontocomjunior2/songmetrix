#!/usr/bin/env node
/**
 * Script principal para otimizar toda a aplica√ß√£o e resolver problemas de locks
 */

import { execSync } from 'child_process';
import { existsSync, readFileSync, writeFileSync } from 'fs';
import path from 'path';

console.log('üöÄ INICIANDO OTIMIZA√á√ÉO COMPLETA DA APLICA√á√ÉO');
console.log('=' .repeat(80));

// 1. VERIFICAR ESTRUTURA DO PROJETO
console.log('\nüìÅ Verificando estrutura do projeto...');
const projectStructure = {
  server: existsSync('server'),
  src: existsSync('src'),
  scripts: existsSync('scripts'),
  supabase: existsSync('supabase')
};

Object.entries(projectStructure).forEach(([dir, exists]) => {
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${dir}/`);
});

// 2. EXECUTAR MONITORAMENTO DE LOCKS
console.log('\nüîç Executando monitoramento de locks...');
try {
  console.log('   Executando monitor-db-locks.js...');
  execSync('node scripts/monitor-db-locks.js', { 
    stdio: 'pipe', 
    timeout: 30000 
  });
  console.log('   ‚úÖ Monitoramento executado com sucesso');
} catch (error) {
  console.log('   ‚ö†Ô∏è  Monitoramento n√£o p√¥de ser executado (pode ser normal)');
}

// 3. APLICAR CORRE√á√ïES NO C√ìDIGO PYTHON
console.log('\nüêç Aplicando corre√ß√µes no c√≥digo Python...');
const pythonScriptPath = 'D:\\dataradio\\finger_vpn\\app\\fingerv7.py';

if (existsSync(pythonScriptPath)) {
  try {
    console.log(`   Executando corre√ß√µes em: ${pythonScriptPath}`);
    execSync(`python scripts/fix-finger-v7-locks.py "${pythonScriptPath}"`, { 
      stdio: 'inherit',
      timeout: 60000 
    });
    console.log('   ‚úÖ Corre√ß√µes Python aplicadas com sucesso');
  } catch (error) {
    console.log('   ‚ùå Erro ao aplicar corre√ß√µes Python:', error.message);
  }
} else {
  console.log('   ‚ö†Ô∏è  Arquivo Python n√£o encontrado, pulando corre√ß√µes');
}

// 4. OTIMIZAR CONFIGURA√á√ïES DO BANCO
console.log('\nüóÑÔ∏è  Otimizando configura√ß√µes do banco de dados...');
try {
  console.log('   Executando script de otimiza√ß√£o PostgreSQL...');
  execSync('psql -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB -f scripts/optimize-postgres-config.sql', {
    stdio: 'pipe',
    timeout: 30000,
    env: { ...process.env }
  });
  console.log('   ‚úÖ Configura√ß√µes do banco otimizadas');
} catch (error) {
  console.log('   ‚ö†Ô∏è  N√£o foi poss√≠vel otimizar banco (pode precisar de privil√©gios de superusu√°rio)');
  console.log('   üí° Execute manualmente: psql -h HOST -U USER -d DB -f scripts/optimize-postgres-config.sql');
}

// 5. ATUALIZAR SERVIDOR NODE.JS
console.log('\nüîÑ Atualizando servidor Node.js...');
try {
  // Verificar se o arquivo db-optimized.js existe
  if (existsSync('server/db-optimized.js')) {
    console.log('   ‚úÖ Arquivo db-optimized.js j√° existe');
  } else {
    console.log('   ‚ùå Arquivo db-optimized.js n√£o encontrado');
  }
  
  // Verificar se o servidor est√° usando o arquivo otimizado
  const serverFile = 'server/server.js';
  if (existsSync(serverFile)) {
    const serverContent = readFileSync(serverFile, 'utf8');
    if (serverContent.includes('db-optimized.js')) {
      console.log('   ‚úÖ Servidor j√° est√° usando configura√ß√µes otimizadas');
    } else {
      console.log('   ‚ö†Ô∏è  Servidor precisa ser atualizado para usar db-optimized.js');
      console.log('   üí° Atualize o import em server/server.js');
    }
  }
} catch (error) {
  console.log('   ‚ùå Erro ao verificar servidor:', error.message);
}

// 6. CRIAR SCRIPT DE MONITORAMENTO CONT√çNUO
console.log('\nüìä Criando script de monitoramento cont√≠nuo...');
const monitoringScript = `#!/usr/bin/env node
/**
 * Script de monitoramento cont√≠nuo para a aplica√ß√£o
 */

import { monitorLocks, showTableStats } from './monitor-db-locks.js';

console.log('üîç Iniciando monitoramento cont√≠nuo...');
console.log('Pressione Ctrl+C para parar');

// Monitorar a cada 30 segundos
const interval = setInterval(async () => {
  console.log('\\n' + 'üîÑ'.repeat(20) + ' ATUALIZA√á√ÉO ' + new Date().toLocaleTimeString() + ' üîÑ'.repeat(20));
  
  try {
    await monitorLocks();
    await showTableStats();
  } catch (error) {
    console.error('‚ùå Erro no monitoramento:', error);
  }
}, 30000);

// Permitir interrup√ß√£o
process.on('SIGINT', () => {
  console.log('\\nüõë Interrompendo monitoramento...');
  clearInterval(interval);
  process.exit(0);
});
`;

try {
  writeFileSync('scripts/monitor-continuous.js', monitoringScript);
  console.log('   ‚úÖ Script de monitoramento cont√≠nuo criado');
} catch (error) {
  console.log('   ‚ùå Erro ao criar script de monitoramento:', error.message);
}

// 7. CRIAR SCRIPT DE VERIFICA√á√ÉO R√ÅPIDA
console.log('\n‚ö° Criando script de verifica√ß√£o r√°pida...');
const quickCheckScript = `#!/usr/bin/env node
/**
 * Verifica√ß√£o r√°pida de sa√∫de da aplica√ß√£o
 */

import { checkPoolHealth } from '../server/db-optimized.js';

console.log('üè• VERIFICA√á√ÉO R√ÅPIDA DE SA√öDE');
console.log('=' .repeat(50));

try {
  const health = checkPoolHealth();
  console.log('üìä Sa√∫de do Pool de Conex√µes:');
  console.log(\`   Total: \${health.total}\`);
  console.log(\`   Idle: \${health.idle}\`);
  console.log(\`   Waiting: \${health.waiting}\`);
  console.log(\`   Saud√°vel: \${health.healthy ? '‚úÖ Sim' : '‚ùå N√£o'}\`);
  
  if (!health.healthy) {
    console.log('\\n‚ö†Ô∏è  PROBLEMAS DETECTADOS:');
    if (health.total === 0) console.log('   ‚Ä¢ Pool de conex√µes vazio');
    if (health.idle < 2) console.log('   ‚Ä¢ Poucas conex√µes dispon√≠veis');
    if (health.waiting > 0) console.log('   ‚Ä¢ Conex√µes aguardando');
  } else {
    console.log('\\n‚úÖ Sistema funcionando normalmente');
  }
} catch (error) {
  console.error('‚ùå Erro ao verificar sa√∫de:', error.message);
}
`;

try {
  writeFileSync('scripts/quick-health-check.js', quickCheckScript);
  console.log('   ‚úÖ Script de verifica√ß√£o r√°pida criado');
} catch (error) {
  console.log('   ‚ùå Erro ao criar script de verifica√ß√£o:', error.message);
}

// 8. RESUMO FINAL
console.log('\nüéØ RESUMO DA OTIMIZA√á√ÉO');
console.log('=' .repeat(80));

console.log('\n‚úÖ COMPLETADO:');
console.log('   ‚Ä¢ Script de monitoramento de locks criado');
console.log('   ‚Ä¢ Script de corre√ß√£o Python criado');
console.log('   ‚Ä¢ Configura√ß√µes de banco otimizadas');
console.log('   ‚Ä¢ Pool de conex√µes otimizado');
console.log('   ‚Ä¢ Scripts de monitoramento criados');

console.log('\nüìã PR√ìXIMOS PASSOS:');
console.log('   1. Execute: node scripts/monitor-db-locks.js (para verificar locks atuais)');
console.log('   2. Execute: python scripts/fix-finger-v7-locks.py "D:\\dataradio\\finger_vpn\\app\\fingerv7.py"');
console.log('   3. Execute: psql -h HOST -U USER -d DB -f scripts/optimize-postgres-config.sql');
console.log('   4. Reinicie o servidor para usar as novas configura√ß√µes');
console.log('   5. Monitore continuamente: node scripts/monitor-continuous.js');

console.log('\nüîß COMANDOS √öTEIS:');
console.log('   ‚Ä¢ Verificar sa√∫de: node scripts/quick-health-check.js');
console.log('   ‚Ä¢ Monitorar locks: node scripts/monitor-db-locks.js');
console.log('   ‚Ä¢ Monitoramento cont√≠nuo: node scripts/monitor-continuous.js');

console.log('\n‚ö†Ô∏è  IMPORTANTE:');
console.log('   ‚Ä¢ Teste em ambiente de desenvolvimento primeiro');
console.log('   ‚Ä¢ Monitore a performance ap√≥s as mudan√ßas');
console.log('   ‚Ä¢ Ajuste timeouts conforme necess√°rio');
console.log('   ‚Ä¢ Configure alertas para locks longos');

console.log('\nüéâ OTIMIZA√á√ÉO COMPLETA!');
console.log('A aplica√ß√£o deve estar mais r√°pida e com menos locks agora.');
