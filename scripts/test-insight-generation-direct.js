/**
 * Teste direto da gera√ß√£o de insights
 * Testa os servi√ßos JavaScript diretamente sem passar pela API
 */

import { LlmService } from '../server/services/llmService.js';
import { InsightGeneratorService } from '../server/services/insightGeneratorService.js';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Carregar vari√°veis de ambiente
const envPaths = [
  path.join(dirname(__dirname), '.env.production'),
  path.join(dirname(__dirname), '.env'),
];

for (const envPath of envPaths) {
  const result = dotenv.config({ path: envPath });
  if (result.error === undefined) {
    console.log('‚úÖ Loaded environment variables from:', envPath);
    break;
  }
}

async function testInsightGeneration() {
  try {
    console.log('üß™ Teste Direto da Gera√ß√£o de Insights - SongMetrix\n');

    // Instanciar servi√ßos
    console.log('üîß Instanciando servi√ßos...');
    const llmService = new LlmService();
    const insightGenerator = new InsightGeneratorService(llmService);

    console.log('‚úÖ Servi√ßos instanciados com sucesso!');

    // Usar o admin como usu√°rio de teste
    const testUserId = '962a2ae3-ebf1-4dcd-9f12-c9b41fda2d43';

    // Testar conex√£o com LLM usando dados de teste
    console.log('\nü§ñ Testando conex√£o com LLM...');
    const testInsightData = {
      user_id: testUserId,
      insights: ['Teste de conex√£o com LLM'],
      user_name: 'Usu√°rio Teste'
    };
    
    try {
      const llmResponse = await llmService.generateEmailContent(testInsightData);
      console.log('‚úÖ LLM respondeu com subject:', llmResponse.subject);
    } catch (llmError) {
      console.log('‚ùå Erro no LLM:', llmError.message);
      return;
    }

    // Testar gera√ß√£o de insights para todos os usu√°rios
    console.log('\nüìä Testando gera√ß√£o de insights para todos os usu√°rios...');
    
    try {
      // Este m√©todo processa todos os usu√°rios em background
      await insightGenerator.generateInsightsForAllUsers();
      console.log('‚úÖ Processo de gera√ß√£o de insights iniciado com sucesso!');
      console.log('üìù Os insights ser√£o salvos como rascunhos na base de dados.');
    } catch (insightError) {
      console.log('‚ùå Erro na gera√ß√£o de insights:', insightError.message);
    }

    // Fechar conex√µes
    await insightGenerator.close();
    console.log('\nüéâ Teste conclu√≠do!');

  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Executar teste
testInsightGeneration();