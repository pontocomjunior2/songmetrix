#!/usr/bin/env node

/**
 * Script para testar a gera√ß√£o de dados realistas
 */

import { createClient } from '@supabase/supabase-js';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;
const API_BASE_URL = process.env.VITE_API_BASE_URL || 'http://localhost:3001';

const supabase = createClient(supabaseUrl, supabaseAnonKey);
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function testRealisticDataGeneration() {
  try {
    console.log('üéØ TESTANDO GERA√á√ÉO DE DADOS REALISTAS\n');
    console.log('=====================================\n');

    // 1. Login
    console.log('1Ô∏è‚É£ FAZENDO LOGIN...');
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: 'admin@songmetrix.com',
      password: 'Admin@@2024'
    });

    if (loginError) {
      console.error('‚ùå Erro no login:', loginError.message);
      return;
    }

    const token = loginData.session.access_token;
    console.log('‚úÖ Login realizado com sucesso\n');

    // 2. Testar fun√ß√£o generateRealisticUserData diretamente
    console.log('2Ô∏è‚É£ TESTANDO FUN√á√ÉO DIRETAMENTE...\n');
    
    const { LlmService } = await import('../server/services/llmService.js');
    const { InsightGeneratorService } = await import('../server/services/insightGeneratorService.js');

    const llmService = new LlmService();
    const insightGenerator = new InsightGeneratorService(llmService);

    // Buscar um usu√°rio de teste
    const { data: users } = await supabaseAdmin
      .from('users')
      .select('id, email, full_name')
      .limit(1);

    if (!users || users.length === 0) {
      console.error('‚ùå Nenhum usu√°rio encontrado');
      return;
    }

    const testUser = users[0];
    console.log(`üë§ USU√ÅRIO DE TESTE: ${testUser.full_name || testUser.email}`);
    console.log(`   ID: ${testUser.id}`);
    console.log(`   Email: ${testUser.email}\n`);

    // Testar gera√ß√£o de dados realistas
    console.log('üé≤ GERANDO DADOS REALISTAS...');
    const realisticData = await insightGenerator.generateRealisticUserData(testUser.id);
    
    console.log('üìä DADOS REALISTAS GERADOS:');
    console.log(`   üéµ Top Song: ${realisticData.topSong?.title || 'N/A'} - ${realisticData.topSong?.artist || 'N/A'}`);
    console.log(`   üé§ Top Artist: ${realisticData.topArtist?.name || 'N/A'} (${realisticData.topArtist?.playCount || 0} plays)`);
    console.log(`   üìà Total Plays: ${realisticData.totalPlays || 0}`);
    console.log(`   üìÖ Weekly Plays: ${realisticData.weeklyPlays || 0}`);
    console.log(`   üìÜ Monthly Plays: ${realisticData.monthlyPlays || 0}`);
    console.log(`   üìä Growth Rate: ${realisticData.growthRate || '0%'}`);
    console.log(`   üéº Favorite Genre: ${realisticData.favoriteGenre || 'N/A'}`);
    console.log(`   üéß Listening Hours: ${realisticData.listeningHours || 0}`);
    console.log(`   üîç Discovery Count: ${realisticData.discoveryCount || 0}`);
    console.log(`   ‚è∞ Peak Hour: ${realisticData.peakHour || 'N/A'}`);
    console.log(`   üóìÔ∏è Weekend vs Weekday: ${realisticData.weekendVsWeekday || 'N/A'}`);
    console.log(`   üé≠ Mood Analysis: ${realisticData.moodAnalysis || 'N/A'}\n`);

    // Verificar se os dados s√£o realistas
    const hasRealisticData = realisticData.totalPlays > 0 && 
                            realisticData.topSong && 
                            realisticData.topArtist;
    
    console.log(`üéØ STATUS: ${hasRealisticData ? '‚úÖ DADOS REALISTAS GERADOS!' : '‚ùå FALHA NA GERA√á√ÉO'}\n`);

    // 3. Testar m√∫ltiplas gera√ß√µes para verificar varia√ß√£o
    console.log('3Ô∏è‚É£ TESTANDO VARIA√á√ÉO DOS DADOS...\n');
    
    for (let i = 1; i <= 3; i++) {
      console.log(`üé≤ GERA√á√ÉO ${i}:`);
      const variation = await insightGenerator.generateRealisticUserData(testUser.id);
      console.log(`   M√∫sica: ${variation.topSong?.title} - ${variation.topSong?.artist}`);
      console.log(`   Artista: ${variation.topArtist?.name}`);
      console.log(`   Total Plays: ${variation.totalPlays}`);
      console.log(`   G√™nero: ${variation.favoriteGenre}`);
      console.log(`   Crescimento: ${variation.growthRate}\n`);
    }

    // 4. Testar gera√ß√£o via API
    console.log('4Ô∏è‚É£ TESTANDO VIA API...\n');
    
    const customPayload = {
      targetType: 'user',
      targetId: testUser.id,
      subject: 'Teste Dados Realistas via API',
      customPrompt: `Ol√° {user_name}! 

üéµ Sua m√∫sica favorita √©: {top_song}
üé§ Seu artista preferido √©: {top_artist}
üìà Voc√™ tem {total_plays} execu√ß√µes totais
üìÖ Esta semana: {weekly_plays} execu√ß√µes
üìÜ Este m√™s: {monthly_plays} execu√ß√µes
üìä Crescimento: {growth_rate}
üéº G√™nero favorito: {favorite_genre}
‚è∞ Hor√°rio de pico: {peak_hour}
üóìÔ∏è {weekend_vs_weekday}
üéß {listening_hours} horas de escuta
üîç {discovery_count} novas descobertas
üé≠ Perfil: {mood_analysis}`,
      variables: ['user_name', 'top_song', 'top_artist', 'total_plays', 'weekly_plays', 'monthly_plays', 'growth_rate', 'favorite_genre', 'peak_hour', 'weekend_vs_weekday', 'listening_hours', 'discovery_count', 'mood_analysis']
    };

    const generateResponse = await fetch(`${API_BASE_URL}/api/admin/insights/generate-custom`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(customPayload)
    });

    console.log(`Status da gera√ß√£o via API: ${generateResponse.status}`);
    if (generateResponse.ok) {
      const generateData = await generateResponse.json();
      console.log('‚úÖ Insight gerado via API!');
      console.log(`   Usu√°rios processados: ${generateData.targetUsers}\n`);
    } else {
      const errorText = await generateResponse.text();
      console.log('‚ùå Erro na gera√ß√£o via API:', errorText);
    }

    // 5. Verificar o insight gerado
    console.log('5Ô∏è‚É£ VERIFICANDO INSIGHT GERADO...\n');
    
    await new Promise(resolve => setTimeout(resolve, 2000)); // Aguardar 2 segundos
    
    const draftsResponse = await fetch(`${API_BASE_URL}/api/admin/insights/drafts`, {
      headers: {
        'Authorization': `Bearer ${token}`,
      }
    });

    if (draftsResponse.ok) {
      const draftsData = await draftsResponse.json();
      const latestInsight = draftsData.drafts?.find(d => d.subject === 'Teste Dados Realistas via API');
      
      if (latestInsight) {
        console.log('üìß INSIGHT ENCONTRADO:');
        console.log(`   ID: ${latestInsight.id}`);
        console.log(`   Assunto: ${latestInsight.subject}`);
        console.log(`   Usu√°rio: ${latestInsight.users?.email}\n`);
        
        console.log('üìù CONTE√öDO GERADO:');
        console.log('-----------------------------------');
        const textContent = latestInsight.content?.replace(/<[^>]*>/g, '') || 'Conte√∫do n√£o dispon√≠vel';
        console.log(textContent);
        console.log('-----------------------------------\n');
        
        // Verificar se cont√©m dados realistas
        const hasRealSongs = !textContent.includes('Sua m√∫sica favorita') && 
                            !textContent.includes('Artista mais tocado') &&
                            /[A-Za-z]+ - [A-Za-z]+/.test(textContent); // Padr√£o "M√∫sica - Artista"
        
        console.log(`üéØ RESULTADO FINAL: ${hasRealSongs ? '‚úÖ CONT√âM DADOS REALISTAS!' : '‚ö†Ô∏è  AINDA USANDO DADOS EST√ÅTICOS'}`);
      } else {
        console.log('‚ö†Ô∏è  Insight n√£o encontrado nos drafts');
      }
    }

    // 6. Cleanup
    await insightGenerator.close();
    await supabase.auth.signOut();

    console.log('\n=====================================');
    console.log('üèÅ TESTE DE DADOS REALISTAS CONCLU√çDO!');
    console.log('=====================================');

  } catch (error) {
    console.error('üí• Erro no teste:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Executar teste
testRealisticDataGeneration().then(() => {
  console.log('\nüéØ Teste finalizado!');
  process.exit(0);
}).catch(error => {
  console.error('üí• Erro fatal:', error);
  process.exit(1);
});